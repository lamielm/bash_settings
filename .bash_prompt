# Bash prompt to change the default terminal prompt and add some git information.
# David Barnes

# Disable python default Virtual Environment prompt
export VIRTUAL_ENV_DISABLE_PROMPT=1

# Use colored prompt
export TERM=xterm-color
export CLICOLOR=1
export LSCOLORS=ExFxCxDxBxegedabagacad

color_prompt=yes;
force_color_prompt=yes;

# Color shortcuts
export NC='\e[0m' # No Color

export BLACK='\e[0;30m'
export RED='\e[0;31m'
export GREEN='\e[0;32m'
export YELLOW='\e[0;33m'
export BLUE='\e[0;34m'
export PINK='\e[0;35m'
export CYAN='\e[0;36m'
export WHITE='\e[0;37m'

export B_BLACK='\e[1;30m'
export B_RED='\e[1;31m'
export B_GREEN='\e[1;32m'
export B_YELLOW='\e[1;33m'
export B_BLUE='\e[1;34m'
export B_PINK='\e[1;35m'
export B_CYAN='\e[1;36m'
export B_WHITE='\e[1;37m'

export HI_BLACK='\e[0;90m'
export HI_RED='\e[0;91m'
export HI_GREEN='\e[0;92m'
export HI_YELLOW='\e[0;93m'
export HI_BLUE='\e[0;94m'
export HI_PINK='\e[0;95m'
export HI_CYAN='\e[0;96m'
export HI_WHITE='\e[0;97m'

export B_HI_BLACK='\e[1;90m'
export B_HI_RED='\e[1;91m'
export B_HI_GREEN='\e[1;92m'
export B_HI_YELLOW='\e[1;93m'
export B_HI_BLUE='\e[1;94m'
export B_HI_PINK='\e[1;95m'
export B_HI_CYAN='\e[1;96m'
export B_HI_WHITE='\e[1;97m'

# Bash Git Config minute duration since last commit for long and medium durations.
# NOTE: Long is > Long. Med is > Med and <= Long. Short is <= Med
BASH_THEME_GIT_LAST_COMMIT_LONG_MINUTES=60
BASH_THEME_GIT_LAST_COMMIT_MED_MINUTES=20

# Bash Git Config branch color.
BASH_THEME_GIT_PROMPT_BRANCH_COLOR="${B_BLUE}"
# Bash Git Config Dirty Color
BASH_THEME_GIT_DIRTY_COLOR=${B_RED}
# Bash Git Config Ahead Color
BASH_THEME_GIT_AHEAD_COLOR=${B_YELLOW}
# Bash Git Config Main Branch Icon Color
BASH_THEME_GIT_BRANCH_ICON_COLOR=${B_YELLOW}

# Bash Git Config duration colors.
BASH_THEME_GIT_TIME_SINCE_COMMIT_SHORT_COLOR="${GREEN}"
BASH_THEME_GIT_TIME_SINCE_COMMIT_MEDIUM_COLOR="${YELLOW}"
BASH_THEME_GIT_TIME_SINCE_COMMIT_LONG_COLOR="${B_RED}"
BASH_THEME_GIT_TIME_SINCE_COMMIT_NEUTRAL_COLOR="${BLUE}"

# Fix color to remove bold when using Winblows where processing of bold is not
# consistent and may result in Bright colors being used instead of Bold.
if [[ "${OSTYPE}" == "msys" ]]; then
    BASH_THEME_GIT_PROMPT_BRANCH_COLOR="${BLUE}"
    BASH_THEME_GIT_DIRTY_COLOR=${RED}
    BASH_THEME_GIT_AHEAD_COLOR=${YELLOW}
    BASH_THEME_GIT_BRANCH_ICON_COLOR=${YELLOW}
    BASH_THEME_GIT_TIME_SINCE_COMMIT_LONG_COLOR="${RED}"
fi

# Bash Git Config dirty and clean text.
BASH_THEME_GIT_PROMPT_DIRTY="${BASH_THEME_GIT_DIRTY_COLOR}(✱)${NC}"
BASH_THEME_GIT_PROMPT_CLEAN=""

# Format for git_prompt_ahead()
BASH_THEME_GIT_PROMPT_AHEAD="${B_WHITE}(${BASH_THEME_GIT_AHEAD_COLOR}↑${B_WHITE})${NC}"

# Get and output current branch name
current_branch_name () {
  local ref
  ref=$(git symbolic-ref --quiet HEAD 2> /dev/null)
  local ret="$?"
  if [[ $ret != 0 ]]; then
    [[ $ret == 128 ]] && return
    ref=$(git rev-parse --short HEAD 2> /dev/null) || return
  fi
  echo "${ref#refs/heads/}"
}

git_status_branch () {
    local branch_name=$(current_branch_name)
    if [[ "${branch_name}" = "master" || "${branch_name}" = "main" ]]; then
        echo "${BASH_THEME_GIT_BRANCH_ICON_COLOR}★${BASH_THEME_GIT_PROMPT_BRANCH_COLOR}$(current_branch_name)${NC}"
    else
        echo "${BASH_THEME_GIT_PROMPT_BRANCH_COLOR}$(current_branch_name)${NC}"
    fi
}

# Determine the time since last commit. If branch is clean,
# use a neutral color, otherwise colors will vary according to time.
git_time_since_commit () {
  if git rev-parse --git-dir > /dev/null 2>&1; then
    # Only proceed if there is actually a commit.
    if [[ $(git log 2>&1 > /dev/null | grep -c "^fatal: bad default revision") == 0 ]]; then
      # Get the last commit.
      last_commit=`git log --pretty=format:'%at' -1 2> /dev/null`
      now=`date +%s`
      seconds_since_last_commit=$((now-last_commit))

      # Totals
      MINUTES=$((seconds_since_last_commit / 60))
      HOURS=$((seconds_since_last_commit/3600))

      # Sub-hours and sub-minutes
      DAYS=$((seconds_since_last_commit / 86400))
      SUB_HOURS=$((HOURS % 24))
      SUB_MINUTES=$((MINUTES % 60))
      if [[ -n $(git status -s 2> /dev/null) ]]; then
        if [ "${MINUTES}" -gt ${BASH_THEME_GIT_LAST_COMMIT_LONG_MINUTES} ]; then
          COLOR="${BASH_THEME_GIT_TIME_SINCE_COMMIT_LONG_COLOR}"
        elif [ "${MINUTES}" -gt ${BASH_THEME_GIT_LAST_COMMIT_MED_MINUTES} ]; then
          COLOR="${BASH_THEME_GIT_TIME_SINCE_COMMIT_MEDIUM_COLOR}"
        else
          COLOR="${BASH_THEME_GIT_TIME_SINCE_COMMIT_SHORT_COLOR}"
        fi
      else
        COLOR="${BASH_THEME_GIT_TIME_SINCE_COMMIT_NEUTRAL_COLOR}"
      fi

      if [ "${HOURS}" -gt 24 ]; then
        echo "${COLOR}${DAYS}d${SUB_HOURS}h${SUB_MINUTES}m${NC}"
      elif [ "${MINUTES}" -gt 60 ]; then
        echo "${COLOR}${HOURS}h${SUB_MINUTES}m${NC}"
      else
        echo "${COLOR}${MINUTES}m${NC}"
      fi
    fi
  fi
}

# Format and output git time since commit
git_status_time () {
  echo "${NC}($(git_time_since_commit)${NC})"
}

# Checks if working tree is dirty
git_status_dirty () {
  local STATUS=''
  local FLAGS
  FLAGS=('--porcelain')
  if [[ "$(git config --get oh-my-zsh.hide-dirty)" != "1" ]]; then
    if [[ ${POST_1_7_2_GIT} -gt 0 ]]; then
      FLAGS+='--ignore-submodules=dirty'
    fi
    if [[ "${DISABLE_UNTRACKED_FILES_DIRTY}" == "true" ]]; then
      FLAGS+='--untracked-files=no'
    fi
    STATUS=$(command git status ${FLAGS} 2> /dev/null | tail -n1)
  fi
  if [[ -n ${STATUS} ]]; then
    echo "${BASH_THEME_GIT_PROMPT_DIRTY}"
  else
    echo "${BASH_THEME_GIT_PROMPT_CLEAN}"
  fi
}

# Outputs if current branch is ahead of remote
git_status_ahead () {
  if [[ -n "$(git rev-list origin/$(current_branch_name)..HEAD 2> /dev/null)" ]]; then
    echo "${BASH_THEME_GIT_PROMPT_AHEAD}"
  fi
}

# Outputs the full git status.
git_status () {
  # Get current branch name
  local cb=$(current_branch_name)
  # If there is a current branch name
  if [[ -n "${cb}" ]]; then
    # Pull out dirty status and ahead status.
    local gs_dirty=$(git_status_dirty)
    local gs_ahead=$(git_status_ahead)
    # Begin creating the status
    local git_status="${NC} on $(git_status_branch) $(git_status_time)"
    # If the brach is dirty, append it to the status
    if [[ -n "${gs_dirty}" ]]; then
        git_status+=" ${gs_dirty}"
    fi
    # If the branch is ahead, append it to the status
    if [[ -n "${gs_ahead}" ]]; then
        git_status+=" ${gs_ahead}"
    fi
    # echo -e "${NC} on $(git_status_branch) $(git_status_time) $(git_status_dirty) $(git_status_ahead)"
    echo -e "${git_status}"
  fi
}

# Output python virtual environment information
virtualenv_info(){
    # Get Virtual Env
    if [[ -n "$VIRTUAL_ENV" ]]; then
        # Strip out the path and just leave the env name
        venv_path="${VIRTUAL_ENV##*\\}"
        venv_path="${venv_path##*\/}"
        echo -e "${NC}(${GREEN}venv:${HI_PINK}${venv_path}${NC}) "
    fi
}

PS1='`virtualenv_info`'"\[$PINK\]\u \[$NC\]at \[$YELLOW\]\h \[$NC\]in \[$CYAN\]\w"'`git_status`'"\n\[$CYAN\]▶ \[$NC\]"
